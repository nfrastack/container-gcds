#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="gcds"

## Sanity Check
print_debug "Making log dir"
mkdir -p "${LOG_PATH}"

print_debug "Adding cleanup script to cron"
echo "0 * * * * /gcds/cleanup.sh >/dev/null 2>&1 " >>/assets/cron/crontab.txt
/usr/bin/crontab /assets/cron/crontab.txt

create_zabbix gcds

if [ ! -d "/assets/config/.java" ]; then
    print_debug "Copying Java State to container"
	cp -R /assets/.java /assets/config/
fi

print_debug "Creating Sync State folders and linking previous Java State"
mkdir -p /assets/config/.SyncState
ln -s /assets/config/.java /root/.java
ln -s /assets/config/.SyncState /root/syncState

print_debug "Checking for Configuration file"
if [ ! -f /assets/config/$CONFIG_FILE ]; then
    print_error "No Configuration File Template Found. Exiting.."
    exit 1
fi

## Start GCDS Configuration
print_notice "Starting Google Cloud Directory Configuration"

## Argument Check
print_debug "Checking if we are going to flush the cache"
if var_true $FLUSH ; then
	flush_arg="--flush"
else
	flush_arg=
fi

print_debug "Checking to enable Force AUTH"
if var_true $FORCE_AUTH ; then
	print_debug "Deleting /assets/config/AUTHORIZED_CONFIG"
	rm -rf /assets/config/AUTHORIZED_CONFIG
else
    print_debug "Populating AUTHORIZED_CONFIG value"
  	AUTHORIZED_CONFIG=$(cat /assets/config/AUTHORIZED_CONFIG)
fi

print_debug "Checking state of config file whether old vs new"
if [ "$AUTHORIZED_CONFIG" != "$CONFIG_FILE" ]; then
	print_notice "Detected a new configuration file. Resetting Encryption Key"
	sanity_var LDAP_PASS "LDAP Password"

print_debug "Create Encrypted Password Routines"
expect_log=$(mktemp)
## Create Encrypted Password Routines
	/usr/bin/expect <<EOD
log_file ${expect_log}
spawn /gcds/encrypt-util -c /assets/config/$CONFIG_FILE
expect ":"
send $LDAP_PASS\r
interact
expect close
EOD

	gcds_encrypted_pass=$(grep "Encrypted value" ${expect_log} | awk '{print $9}')
	rm -rf ${expect_log}

	print_debug "Copy Config file into running configuration file"
	cp /assets/config/$CONFIG_FILE $GCDS_XML_FILE

	### Delete old OAuth Token
	print_debug "Delete Oauth Token"
	sed -i "/<oAuth2RefreshToken>.*<\/oAuth2RefreshToken>/d" $GCDS_XML_FILE

	### Update LDAP Credentials
	print_debug "Update LDAP Credentials"
	gcds_xml_path="//config/plugins/local/plugin/config/authCredentialsEncrypted"
	gcds_new_value="<authCredentialsEncrypted>$gcds_encrypted_pass</authCredentialsEncrypted>"
	gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
	modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

	### Update Oauth Machine Host information
	print_debug "Update OAUTH Machine Host Information"
	gcds_xml_path="/config/plugins/plugin[1]/config/googleCredMachineName"
	gcds_new_value="<googleCredMachineName>$HOSTNAME</googleCredMachineName>"
	gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
	modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

    ### Update LDAP Machine Host information
	print_debug "Update LDAP Machine Host Information"
	gcds_xml_path="/config/plugins/plugin[2]/config/ldapCredMachineName"
	gcds_new_value="<ldapCredMachineName>$HOSTNAME</ldapCredMachineName>"
	gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
	modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

    ### Update Log Level information
	print_debug "Update Log Level"
	gcds_xml_path="/config/logging/defaultLogLevel"
	gcds_new_value="<defaultLogLevel>$LOG_LEVEL</defaultLogLevel>"
	gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
	modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

	## Go in endless loop until auth file exists
	print_debug "Checking to ensure authorization exists"
	counter=1
	while ! [ -f /gcds/oauthorized ];
	do
	    print_notice "***"
	    print_notice "*** CONTAINER NOT FULLY OPERATIONAL"
	    print_notice "*** You must enter this container and complete the OAUTH2 Manual Verification!"
	    print_notice "***"
	    print_notice "*** 'docker exec -it (container-name) bash'"
	    print_notice "*** 'sh auth.sh'"
	    print_notice "***"
	    print_notice "***"

	if var_true $ENABLE_EMAIL_NOTIFICATIONS ; then
		    print_debug "Sending Email notification"
			echo "The GCDS Docker Container has recently started and needs to have additional steps completed in order for the GoogleCloudDirectorySync Service to continue. Please login to the host server, enter the GCDS container and execute the 'auth.sh' script." | s-nail -v \
		      -r "$MAIL_FROM" \
		      -s "[GCDS] OAUTH2 Authorization Required!" \
		      -S smtp="$SMTP_HOST:$SMTP_PORT" \
		      $MAIL_TO & >/dev/null 2>&1
	fi

	if var_true $ENABLE_WEBHOOK_NOTIFICATIONS ; then
		counter=$((counter +1 ))
		print_debug "Sending Webhook Notification"
		/usr/local/bin/webhook-alert $WEBHOOK_CHANNEL "*OAUTH required*" "Google Cloud Directory Sync service has just restarted and needs to be authorized to work. Please login to the host server, enter the GCDS container and execute the 'auth.sh' script.\n "  "gcds-app"

		if [ $counter = "15" ] ; then
			/usr/local/bin/webhook-alert $WEBHOOK_CHANNEL_ESCALATED "*Google Cloud Directory Sync Service Down!*" "Please alert Sysadmins - The Google Cloud Directory Sync service has restarted and needs to be authorized to work. Please login to the host server, enter the GCDS container and execute the 'auth.sh' script.\n Any synchronizing of LDAP accounts to Google will fail until this is completed!\n"  "gcds-app"
			counter=1
		fi
	fi
	    sleep 120
	done
else
	print_debug "Not generating new configuration, copying existing configuraiton file over to runtime config."
	cp /assets/config/$CONFIG_FILE $GCDS_XML_FILE
fi

### Update SMTP Host
print_debug "Update SMTP Host"
gcds_xml_path="/config/notification/smtpRelay"
gcds_new_value="<smtpRelay>${SMTP_HOST}</smtpRelay>"
gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

### Update SMTP From Address
print_debug "Update SMTP FROM Address"
gcds_xml_path="/config/notification/fromAddress"
gcds_new_value="<fromAddress>${MAIL_FROM}</fromAddress>"
gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

### Update SMTP To address
print_debug "Update SMTP To Address"
gcds_xml_path="/config/notification/toAddress"
gcds_new_value="<toAddress>${MAIL_TO}</toAddress>"
gcds_old_value=$(echo "cat $gcds_xml_path" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')
modify_configuration $gcds_old_value $gcds_new_value $GCDS_XML_FILE

### Clean up old sync.lock if existing
print_debug "Cleanup any sync lock files"
rm -rf /root/syncState/*.lock

liftoff