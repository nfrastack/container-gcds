#!/command/with-contenv bash
# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

source /container/base/functions/container/init
check_container_initialized
check_service_initialized init 50-gcds
source /container/functions/50-gcds
source /container/defaults/50-gcds
SERVICE_NAME="gcds-scheduler"
liftoff

setup_container_mode

if [ "${MODE,,}" = "manual" ] || [ "${MODE,,}" = "none" ] || [ "${MODE,,}" = "standalone" ] || [ "${1,,}" = "manual" ] || [ "${1,,}" = "now" ]; then
    SYNC_BEGIN=+0
    manual=TRUE
    print_debug "Detected Manual Mode"
else
    sleep 5
    current_time=$(date +"%s")
    today=$(date +"%Y%m%d")

    if [[ $SYNC_BEGIN =~ ^\+(.*)$ ]]; then
        waittime=$(( ${BASH_REMATCH[1]} * 60 ))
        target_time=$(($current_time + $waittime))
    else
        target_time=$(date --date="${today}${SYNC_BEGIN}" +"%s")
        if [[ "$target_time" < "$current_time" ]]; then
            target_time=$(($target_time + 24*60*60))
        fi
        waittime=$(($target_time - $current_time))
    fi
    print_debug "Wait Time: ${waittime} Target time: ${target_time} Current Time: ${current_time}"
    print_info "Next Sync at $(date -d @${target_time} +"%Y-%m-%d %T %Z")"
    sleep $waittime
fi

while true; do
    sync_start_time=$(date +"%s")
    print_debug "GCDS Sync routines started time: $(date +'%Y-%m-%d %T %Z')"
    gcds_pre_sync
    gcds_perform_sync
    gcds_check_errors
    sync_finish_time=$(date +"%s")
    sync_total_time=$(echo $((sync_finish_time-sync_start_time)))
    gcds_post_sync
    if [ -z "$app_exit_code" ] ; then app_exit_code="0" ; fi
    print_info "GCDS sync routines finish time: $(date -d @${sync_finish_time} +"%Y-%m-%d %T %Z") with exit code ${app_exit_code}"
    print_notice "GCDS sync routines time taken: $(echo ${sync_total_time} | awk '{printf "Hours: %d Minutes: %02d Seconds: %02d", $1/3600, ($1/60)%60, $1%60}')"

    if var_true "${manual}" ; then
        print_debug "Exiting due to manual mode"
        exit ${app_exit_code};
    else
        if var_true "${stop_scheduler}" ; then
            print_error "Stopping scheduler due to detected errors. Fix with the GUI and restart container."
            s6-svc -d /var/run/s6/legacy-services/50-gcds-scheduler
        else
            print_notice "Sleeping for another $(($SYNC_INTERVAL*60-sync_total_time)) seconds. Waking up at $(date -d@"$(( $(date +%s)+$(($SYNC_INTERVAL*60-sync_total_time))))" +"%Y-%m-%d %T %Z") "
            sleep $(($SYNC_INTERVAL*60-sync_total_time))
        fi
    fi
done

